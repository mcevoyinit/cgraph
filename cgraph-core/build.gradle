plugins {
    id "java-library"
    id "maven-publish"
}

group 'com.cgraph.core'
version '1.0-SNAPSHOT'

repositories {
    maven {
        url 'https://repo1.maven.org/maven2'
    }
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url 'https://jitpack.io' }
    maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda' }
    maven { url 'https://repo.gradle.org/gradle/libs-releases' }
    maven { url "https://ci-artifactory.corda.r3cev.com/artifactory/corda-lib" }
    maven { url "https://ci-artifactory.corda.r3cev.com/artifactory/corda" }
    maven { url "https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases" }
    maven { url "https://ci-artifactory.corda.r3cev.com/artifactory/corda-lib" }
    maven { url "https://ci-artifactory.corda.r3cev.com/artifactory/corda-lib-dev" }
    maven { url "https://jitpack.io" }
}

repositories {
    mavenCentral()
}

apply plugin: 'kotlin'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

cordapp {

    targetPlatformVersion cordapp_platform_version.toInteger()
    minimumPlatformVersion cordapp_platform_version.toInteger()

    workflow {
        name "CGraph-Cordapp"
        vendor "Corda Open Source"
        licence "Apache License, Version 2.0"
        versionId 1
    }
    signing {
        enabled false
    }
}

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }

    test {
        resources {
            srcDir rootProject.file("config/test")
        }
    }

    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/kotlin')
        }
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    // Kotlin.
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'com.squareup.okhttp3:okhttp:3.14.6'

    // Corda dependencies.
    // Corda integration dependencies
    cordaCompile "net.corda:corda-core:$corda_release_version"
    cordaCompile "net.corda:corda-jackson:$corda_release_version"
    cordaCompile "net.corda:corda-rpc:$corda_release_version"
    cordaCompile "net.corda:corda-node-api:$corda_release_version"
    cordaRuntime "net.corda:corda:$corda_release_version"
    cordaCompile "net.corda:corda-node:$corda_release_version"

    testCompile "net.corda:corda-node-driver:$corda_release_version"

    // Corda Test Dependencies
    implementation "$corda_group:corda-core:$corda_release_version"
    implementation "$corda_group:corda-node-driver:$corda_release_version"

    // Logging.
    testCompile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"

    // Testing.
    testCompile "$corda_group:corda-node-driver:$corda_release_version"
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    //testCompile "$junit_group:junit:junit:$junit_version"
    implementation "$junit_group:junit-jupiter-engine:$junit_version"
    implementation "$junit_group:junit-jupiter-api:$junit_version"

    //Braid
    compile 'io.cordite.braid:braid-corda:5.0.0-RC09'

    // DGraph
    compile 'io.dgraph:dgraph4j:21.03.1'
    compile 'com.google.code.gson:gson:2.7'
    implementation 'org.json:json:20171018'

}

jar {
    exclude '**/log4j2*.xml'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

test {
    jvmArgs = ["-ea", "-javaagent:../lib/quasar.jar"]
    useJUnitPlatform()
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
    kotlinOptions {
        freeCompilerArgs = ["-Xnormalize-constructor-calls=enable"]
        languageVersion = "1.2"
        apiVersion = "1.2"
        jvmTarget = "1.8"
        javaParameters = true
    }
}

task integrationTest(type: Test, dependsOn: []) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

// Configures the publishing
publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/mcevoyinit/cgraph")
            credentials {
                username = "mcevoyinit"//System.getenv("GITHUB_USERNAME")
                password = "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"//System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
            // Behebt den Fehler mit den dynamischen Versionen von Spring Boot
            // Fixes the error with dynamic versions when using Spring Boot
            /*versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }*/
        }
    }
}